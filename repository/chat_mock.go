// Code generated by MockGen. DO NOT EDIT.
// Source: repository/chat_interface.go

// Package mock_repository is a generated GoMock package.
package repository

import (
	gomock "github.com/golang/mock/gomock"
	pgx "github.com/jackc/pgx"
	models "github.com/saskamegaprogrammist/amazingChat/models"
	reflect "reflect"
)

// MockChatsRepoInterface is a mock of ChatsRepoInterface interface
type MockChatsRepoInterface struct {
	ctrl     *gomock.Controller
	recorder *MockChatsRepoInterfaceMockRecorder
}

// MockChatsRepoInterfaceMockRecorder is the mock recorder for MockChatsRepoInterface
type MockChatsRepoInterfaceMockRecorder struct {
	mock *MockChatsRepoInterface
}

// NewMockChatsRepoInterface creates a new mock instance
func NewMockChatsRepoInterface(ctrl *gomock.Controller) *MockChatsRepoInterface {
	mock := &MockChatsRepoInterface{ctrl: ctrl}
	mock.recorder = &MockChatsRepoInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockChatsRepoInterface) EXPECT() *MockChatsRepoInterfaceMockRecorder {
	return m.recorder
}

// GetChatIdByName mocks base method
func (m *MockChatsRepoInterface) GetChatIdByName(chat *models.Chat) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChatIdByName", chat)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChatIdByName indicates an expected call of GetChatIdByName
func (mr *MockChatsRepoInterfaceMockRecorder) GetChatIdByName(chat interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChatIdByName", reflect.TypeOf((*MockChatsRepoInterface)(nil).GetChatIdByName), chat)
}

// CheckUserInChat mocks base method
func (m *MockChatsRepoInterface) CheckUserInChat(userId, chatId string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckUserInChat", userId, chatId)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckUserInChat indicates an expected call of CheckUserInChat
func (mr *MockChatsRepoInterfaceMockRecorder) CheckUserInChat(userId, chatId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckUserInChat", reflect.TypeOf((*MockChatsRepoInterface)(nil).CheckUserInChat), userId, chatId)
}

// InsertChat mocks base method
func (m *MockChatsRepoInterface) InsertChat(chat *models.Chat) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertChat", chat)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertChat indicates an expected call of InsertChat
func (mr *MockChatsRepoInterfaceMockRecorder) InsertChat(chat interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertChat", reflect.TypeOf((*MockChatsRepoInterface)(nil).InsertChat), chat)
}

// insertChatUsers mocks base method
func (m *MockChatsRepoInterface) insertChatUsers(chat *models.Chat, transaction *pgx.Tx) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "insertChatUsers", chat, transaction)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// insertChatUsers indicates an expected call of insertChatUsers
func (mr *MockChatsRepoInterfaceMockRecorder) insertChatUsers(chat, transaction interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "insertChatUsers", reflect.TypeOf((*MockChatsRepoInterface)(nil).insertChatUsers), chat, transaction)
}

// GetChatsByUserId mocks base method
func (m *MockChatsRepoInterface) GetChatsByUserId(userId string) ([]models.Chat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChatsByUserId", userId)
	ret0, _ := ret[0].([]models.Chat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChatsByUserId indicates an expected call of GetChatsByUserId
func (mr *MockChatsRepoInterfaceMockRecorder) GetChatsByUserId(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChatsByUserId", reflect.TypeOf((*MockChatsRepoInterface)(nil).GetChatsByUserId), userId)
}

// CheckChat mocks base method
func (m *MockChatsRepoInterface) CheckChat(chatId string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckChat", chatId)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckChat indicates an expected call of CheckChat
func (mr *MockChatsRepoInterfaceMockRecorder) CheckChat(chatId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckChat", reflect.TypeOf((*MockChatsRepoInterface)(nil).CheckChat), chatId)
}
