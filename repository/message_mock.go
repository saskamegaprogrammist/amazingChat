// Code generated by MockGen. DO NOT EDIT.
// Source: repository/message_interface.go

// Package mock_repository is a generated GoMock package.
package repository

import (
	gomock "github.com/golang/mock/gomock"
	models "github.com/saskamegaprogrammist/amazingChat/models"
	reflect "reflect"
)

// MockMessagesRepoInterface is a mock of MessagesRepoInterface interface
type MockMessagesRepoInterface struct {
	ctrl     *gomock.Controller
	recorder *MockMessagesRepoInterfaceMockRecorder
}

// MockMessagesRepoInterfaceMockRecorder is the mock recorder for MockMessagesRepoInterface
type MockMessagesRepoInterfaceMockRecorder struct {
	mock *MockMessagesRepoInterface
}

// NewMockMessagesRepoInterface creates a new mock instance
func NewMockMessagesRepoInterface(ctrl *gomock.Controller) *MockMessagesRepoInterface {
	mock := &MockMessagesRepoInterface{ctrl: ctrl}
	mock.recorder = &MockMessagesRepoInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMessagesRepoInterface) EXPECT() *MockMessagesRepoInterfaceMockRecorder {
	return m.recorder
}

// InsertMessage mocks base method
func (m *MockMessagesRepoInterface) InsertMessage(message *models.Message) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertMessage", message)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertMessage indicates an expected call of InsertMessage
func (mr *MockMessagesRepoInterfaceMockRecorder) InsertMessage(message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertMessage", reflect.TypeOf((*MockMessagesRepoInterface)(nil).InsertMessage), message)
}

// GetMessagesByChatId mocks base method
func (m *MockMessagesRepoInterface) GetMessagesByChatId(chatId string) ([]models.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessagesByChatId", chatId)
	ret0, _ := ret[0].([]models.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMessagesByChatId indicates an expected call of GetMessagesByChatId
func (mr *MockMessagesRepoInterfaceMockRecorder) GetMessagesByChatId(chatId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessagesByChatId", reflect.TypeOf((*MockMessagesRepoInterface)(nil).GetMessagesByChatId), chatId)
}
